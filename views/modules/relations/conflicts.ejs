<%- include('../../partials/header') %>

<style>
    body { font-family: Arial, sans-serif; }
    .container { margin-top: 30px; }
    table { width: 100%; border-collapse: collapse; }
    th, td { padding: 10px; border: 1px solid #ddd; text-align: center; }
    th { background-color: #f8f9fa; }
    .delete-btn { background-color: red; color: white; border: none; padding: 5px 10px; cursor: pointer; }
    .delete-btn:hover { background-color: darkred; }
    .success-msg, .error-msg { text-align: center; font-weight: bold; margin-top: 10px; }
    .success-msg { color: green; }
    .error-msg { color: red; }
</style>

<!-- Breadcrumbs -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/relations">Relations</a></li>
        <li class="breadcrumb-item active" aria-current="page">Conflict Management</li>
    </ol>
</nav>

<div class="container">
    <h2 class="text-center">Conflict Management</h2>

    <!-- Success/Error Messages -->
    <div id="messageBox"></div>

    <!-- Filter Dropdown -->
    <label for="statusFilter" class="form-label">Filter by Status:</label>
    <select id="statusFilter" class="form-select w-25 mb-3" onchange="filterTable()">
        <option value="All">All</option>
        <option value="Resolved">Resolved</option>
        <option value="Ongoing">Ongoing</option>
        <option value="Pending">Pending</option>
    </select>

    <div class="table-container">
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Conflict ID</th>
                    <th>Employee IDs</th>
                    <th>Type of Conflict</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="conflictTable">
                <% conflicts.forEach(conflict => { %>
                <tr data-conflict-id="<%= conflict.Conflict_ID %>" data-status="<%= conflict.Status %>">
                    <td><%= conflict.Conflict_ID %></td>
                    <td><%= conflict.Employee_IDs %></td>
                    <td><%= conflict.Conflict_Type %></td>
                    <td>
                        <select class="form-select action-status" data-conflict-id="<%= conflict.Conflict_ID %>" onchange="updateStatus(this)">
                            <option value="Resolved" <%= conflict.Status === 'Resolved' ? 'selected' : '' %>>Resolved</option>
                            <option value="Ongoing" <%= conflict.Status === 'Ongoing' ? 'selected' : '' %>>Ongoing</option>
                            <option value="Pending" <%= conflict.Status === 'Pending' ? 'selected' : '' %>>Pending</option>
                        </select>
                    </td>
                    <td>
                        <button class="delete-btn" onclick="deleteConflict(<%= conflict.Conflict_ID %>)">Delete</button>
                    </td>
                </tr>
                <% }) %>
            </tbody>
        </table>
    </div>
</div>


<%- include('../../partials/footer') %>

<!-- JavaScript for Conflict Management -->
<script>
    console.log("✅ JavaScript Loaded!");

    // ✅ Filter conflicts by status
    function filterTable() {
        let selectedStatus = document.getElementById("statusFilter").value;
        let rows = document.querySelectorAll("#conflictTable tr");

        rows.forEach(row => {
            let status = row.querySelector(".action-status").value;
            row.style.display = (selectedStatus === "All" || status === selectedStatus) ? "" : "none";
        });
    }

    function deleteConflict(conflictID) {
    if (!confirm("Are you sure you want to delete this conflict?")) return;

    fetch(`/relations/conflict-management/${conflictID}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' } // Ensure proper headers
    })
    .then(response => response.json()) // Ensure we always parse JSON
    .then(data => {
        console.log("✅ Server Response:", data);
        if (data.success) {
            document.querySelector(`tr[data-conflict-id="${conflictID}"]`)?.remove();
            showMessage("✅ Conflict deleted successfully!", "success");
        } else {
            showMessage(`❌ ${data.message}`, "error");
        }
    })
    .catch(error => {
        console.error("❌ Network error:", error);
        showMessage("❌ Network error or invalid response. Please try again.", "error");
    });
}



    // ✅ Show messages
    function showMessage(msg, type) {
        let messageBox = document.getElementById("messageBox");
        messageBox.innerHTML = `<p class="${type}-msg">${msg}</p>`;
        setTimeout(() => { messageBox.innerHTML = ""; }, 3000);
    }

    // ✅ Ensure script loads after the page
    document.addEventListener("DOMContentLoaded", function () {
        console.log("✅ DOM fully loaded.");
    });

</script>
