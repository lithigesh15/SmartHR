<%- include('../../partials/header') %>

<style>
  .card {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    height: 100%;
  }

  .card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .breadcrumb {
    margin-bottom: 20px;
    padding: 10px 15px;
    background-color: #f8f9fa;
    border-radius: 4px;
  }

  /* Alert Message Styling */
  .alert {
    display: none;
    padding: 15px;
    margin-top: 10px;
    border-radius: 5px;
  }

  .alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
</style>

<!-- Breadcrumb -->
<nav class="breadcrumb-container">
  <div class="container-fluid">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
      <li class="breadcrumb-item"><a href="/performance">Performance</a></li>
      <li class="breadcrumb-item active" aria-current="page">Goal Setting</li>
    </ol>
  </div>
</nav>

<h1 class="mb-4 text-center">Goal Setting</h1>

<!-- Goal Setting Form -->
<div class="container my-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card p-4 shadow">
        <h4 class="text-center">Set a New Goal</h4>
        
        <!-- Alert Messages -->
        <div id="alert-success" class="alert alert-success">Goal saved successfully!</div>
        <div id="alert-error" class="alert alert-danger">Error saving goal. Please try again.</div>

        <form id="goal-form">
          <div class="mb-3">
            <label for="goal-title" class="form-label">Goal Title</label>
            <input type="text" class="form-control" id="goal-title" required>
          </div>
          <div class="mb-3">
            <label for="goal-description" class="form-label">Description</label>
            <textarea class="form-control" id="goal-description" rows="3" required></textarea>
          </div>
          <div class="mb-3">
            <label for="goal-deadline" class="form-label">Deadline</label>
            <input type="date" class="form-control" id="goal-deadline" required>
          </div>
          <div class="mb-3">
            <label for="goal-status" class="form-label">Status</label>
            <select class="form-select" id="goal-status">
              <option value="Not Started">Not Started</option>
              <option value="In Progress">In Progress</option>
              <option value="Completed">Completed</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary w-100">Save Goal</button>
        </form>
      </div>
    </div>
  </div>
</div>

<%- include('../../partials/footer') %>

<!-- JavaScript for Form Handling -->
<script>
document.addEventListener("DOMContentLoaded", function () {
    const goalForm = document.getElementById("goal-form");
    const alertSuccess = document.getElementById("alert-success");
    const alertError = document.getElementById("alert-error");
    const submitButton = goalForm.querySelector("button[type='submit']");

    goalForm.addEventListener("submit", async function (event) {
        event.preventDefault();

        // Hide previous alerts
        alertSuccess.style.display = "none";
        alertError.style.display = "none";

        // Get form values
        const title = document.getElementById("goal-title").value.trim();
        const description = document.getElementById("goal-description").value.trim();
        const deadline = document.getElementById("goal-deadline").value;
        const status = document.getElementById("goal-status").value;

        // Validate deadline (must be in the future)
        const today = new Date().toISOString().split("T")[0]; 
        if (deadline < today) {
            alertError.textContent = "Deadline must be in the future.";
            alertError.style.display = "block";
            return;
        }

        // Validate form fields
        if (!title || !description || !deadline || !status) {
            alertError.textContent = "All fields are required.";
            alertError.style.display = "block";
            return;
        }

        try {
            submitButton.disabled = true; // Disable button to prevent multiple submissions

            const response = await fetch("/performance/goals", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ title, description, deadline, status }),
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || "Failed to save goal.");
            }

            // Success message
            alertSuccess.textContent = data.message;
            alertSuccess.style.display = "block";
            alertError.style.display = "none";
            goalForm.reset();
        } catch (error) {
            console.error("Error:", error);
            alertError.textContent = error.message || "Server error. Please try again.";
            alertError.style.display = "block";
        } finally {
            submitButton.disabled = false; // Re-enable button
        }

        // Hide alerts after 3 seconds
        setTimeout(() => {
            alertSuccess.style.display = "none";
            alertError.style.display = "none";
        }, 3000);
    });
});
</script>
